////////////////////////////////////////////////////////////////////////////////
// Filename: PacketFileQueue.h
////////////////////////////////////////////////////////////////////////////////
#pragma once

//////////////
// INCLUDES //
//////////////
#include "PacketConfig.h"
#include <list>
#include <mutex>

///////////////
// NAMESPACE //
///////////////

/////////////
// DEFINES //
/////////////

////////////
// GLOBAL //
////////////

///////////////
// NAMESPACE //
///////////////

// Packet data explorer
PacketNamespaceBegin(Packet)

////////////////
// FORWARDING //
////////////////

// We know the PacketFile class
class PacketFile;

////////////////
// STRUCTURES //
////////////////

////////////////////////////////////////////////////////////////////////////////
// Class name: PacketFileQueue
////////////////////////////////////////////////////////////////////////////////
class PacketFileQueue
{
public:

//////////////////
// CONSTRUCTORS //
public: //////////

	// Constructor / destructor
	PacketFileQueue();
	~PacketFileQueue();

//////////////////
// MAIN METHODS //
public: //////////

	// Enqueue
	void Enqueue(PacketFile* _file);

	// Try dequeue (nullptr if empty)
	PacketFile* TryDequeue();

	// Approximate size
	uint32_t GetSize();

private:

///////////////
// VARIABLES //
private: //////

	// Our file list
	std::list<PacketFile*> m_FileList;

	// The mutex
	std::mutex m_Mutex;
};

// Packet data explorer
PacketNamespaceEnd(Packet)